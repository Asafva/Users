{"ast":null,"code":"// users State - המידע ברמת האפליקציה הקשור למוצרים\nexport class usersState {\n  constructor() {\n    this.users = [];\n  } // undefined חשוב לאתחל מערכים כך שלא יהיה בו\n\n\n} // users Action Type: \n\nexport let usersActionType; // users Action:\n\n(function (usersActionType) {\n  usersActionType[\"usersDownloaded\"] = \"usersDownloaded\";\n  usersActionType[\"userAdded\"] = \"userAdded\";\n  usersActionType[\"userUpdated\"] = \"userUpdated\";\n  usersActionType[\"userDeleted\"] = \"userDeleted\";\n})(usersActionType || (usersActionType = {}));\n\n// users Action Creators: \nexport function usersDownloadedAction(users) {\n  return {\n    type: usersActionType.usersDownloaded,\n    payload: users\n  };\n}\nexport function userAddedAction(addeduser) {\n  return {\n    type: usersActionType.userAdded,\n    payload: addeduser\n  };\n}\nexport function userUpdatedAction(updateduser) {\n  return {\n    type: usersActionType.userUpdated,\n    payload: updateduser\n  };\n}\nexport function userDeletedAction(id) {\n  return {\n    type: usersActionType.userDeleted,\n    payload: id\n  };\n} // users Reducer: \n\nexport function usersReducer(currentState = new usersState(), action) {\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case usersActionType.usersDownloaded:\n      // payload = all users\n      newState.users = action.payload;\n      break;\n\n    case usersActionType.userAdded:\n      // payload = added user\n      newState.users.push(action.payload);\n      break;\n\n    case usersActionType.userUpdated:\n      // payload = updated user\n      const indexToUpdate = newState.users.findIndex(p => p.login.username === action.payload.id);\n      newState.users[indexToUpdate] = action.payload;\n      break;\n\n    case usersActionType.userDeleted:\n      // payload = user id to delete\n      const indexToDelete = newState.users.findIndex(p => p.login.username === action.payload);\n      newState.users.splice(indexToDelete, 1);\n      break;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/New folder/Frontend/src/Redux/UsersState.ts"],"names":["usersState","users","usersActionType","usersDownloadedAction","type","usersDownloaded","payload","userAddedAction","addeduser","userAdded","userUpdatedAction","updateduser","userUpdated","userDeletedAction","id","userDeleted","usersReducer","currentState","action","newState","push","indexToUpdate","findIndex","p","login","username","indexToDelete","splice"],"mappings":"AAEA;AACA,OAAO,MAAMA,UAAN,CAAiB;AAAA;AAAA,SACbC,KADa,GACQ,EADR;AAAA,IACY;;;AADZ,C,CAIxB;;AACA,WAAYC,eAAZ,C,CAOA;;WAPYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAaZ;AACA,OAAO,SAASC,qBAAT,CAA+BF,KAA/B,EAAgE;AACnE,SAAO;AAAEG,IAAAA,IAAI,EAAEF,eAAe,CAACG,eAAxB;AAAyCC,IAAAA,OAAO,EAAEL;AAAlD,GAAP;AACH;AACD,OAAO,SAASM,eAAT,CAAyBC,SAAzB,EAA4D;AAC/D,SAAO;AAAEJ,IAAAA,IAAI,EAAEF,eAAe,CAACO,SAAxB;AAAmCH,IAAAA,OAAO,EAAEE;AAA5C,GAAP;AACH;AACD,OAAO,SAASE,iBAAT,CAA2BC,WAA3B,EAAgE;AACnE,SAAO;AAAEP,IAAAA,IAAI,EAAEF,eAAe,CAACU,WAAxB;AAAqCN,IAAAA,OAAO,EAAEK;AAA9C,GAAP;AACH;AACD,OAAO,SAASE,iBAAT,CAA2BC,EAA3B,EAAoD;AACvD,SAAO;AAAEV,IAAAA,IAAI,EAAEF,eAAe,CAACa,WAAxB;AAAqCT,IAAAA,OAAO,EAAEQ;AAA9C,GAAP;AACH,C,CAED;;AACA,OAAO,SAASE,YAAT,CAAsBC,YAAwB,GAAG,IAAIjB,UAAJ,EAAjD,EAAmEkB,MAAnE,EAAoG;AAEvG,QAAMC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAjB;;AAEA,UAAQC,MAAM,CAACd,IAAf;AAEI,SAAKF,eAAe,CAACG,eAArB;AAAsC;AAClCc,MAAAA,QAAQ,CAAClB,KAAT,GAAiBiB,MAAM,CAACZ,OAAxB;AACA;;AAEJ,SAAKJ,eAAe,CAACO,SAArB;AAAgC;AAC5BU,MAAAA,QAAQ,CAAClB,KAAT,CAAemB,IAAf,CAAoBF,MAAM,CAACZ,OAA3B;AACA;;AAEJ,SAAKJ,eAAe,CAACU,WAArB;AAAkC;AAC9B,YAAMS,aAAa,GAAGF,QAAQ,CAAClB,KAAT,CAAeqB,SAAf,CAAyBC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQC,QAAR,KAAqBP,MAAM,CAACZ,OAAP,CAAeQ,EAAlE,CAAtB;AACAK,MAAAA,QAAQ,CAAClB,KAAT,CAAeoB,aAAf,IAAgCH,MAAM,CAACZ,OAAvC;AACA;;AAEJ,SAAKJ,eAAe,CAACa,WAArB;AAAkC;AAC9B,YAAMW,aAAa,GAAGP,QAAQ,CAAClB,KAAT,CAAeqB,SAAf,CAAyBC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQC,QAAR,KAAqBP,MAAM,CAACZ,OAA1D,CAAtB;AACAa,MAAAA,QAAQ,CAAClB,KAAT,CAAe0B,MAAf,CAAsBD,aAAtB,EAAqC,CAArC;AACA;AAlBR;;AAqBA,SAAOP,QAAP;AAEH","sourcesContent":["import UserModel from \"../Models/UserModel\";\r\n\r\n// users State - המידע ברמת האפליקציה הקשור למוצרים\r\nexport class usersState {\r\n    public users: UserModel[] = []; // undefined חשוב לאתחל מערכים כך שלא יהיה בו\r\n}\r\n\r\n// users Action Type: \r\nexport enum usersActionType {\r\n    usersDownloaded = \"usersDownloaded\",\r\n    userAdded = \"userAdded\",\r\n    userUpdated = \"userUpdated\",\r\n    userDeleted = \"userDeleted\"\r\n}\r\n\r\n// users Action:\r\nexport interface usersAction {\r\n    type: usersActionType;\r\n    payload?: any; // מטען שילוח\r\n}\r\n\r\n// users Action Creators: \r\nexport function usersDownloadedAction(users: UserModel[]): usersAction {\r\n    return { type: usersActionType.usersDownloaded, payload: users };\r\n}\r\nexport function userAddedAction(addeduser: UserModel): usersAction {\r\n    return { type: usersActionType.userAdded, payload: addeduser };\r\n}\r\nexport function userUpdatedAction(updateduser: UserModel): usersAction {\r\n    return { type: usersActionType.userUpdated, payload: updateduser };\r\n}\r\nexport function userDeletedAction(id: number): usersAction {\r\n    return { type: usersActionType.userDeleted, payload: id };\r\n}\r\n\r\n// users Reducer: \r\nexport function usersReducer(currentState: usersState = new usersState(), action: usersAction): usersState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case usersActionType.usersDownloaded: // payload = all users\r\n            newState.users = action.payload;\r\n            break;\r\n\r\n        case usersActionType.userAdded: // payload = added user\r\n            newState.users.push(action.payload);\r\n            break;\r\n\r\n        case usersActionType.userUpdated: // payload = updated user\r\n            const indexToUpdate = newState.users.findIndex(p => p.login.username === action.payload.id);\r\n            newState.users[indexToUpdate] = action.payload;\r\n            break;\r\n\r\n        case usersActionType.userDeleted: // payload = user id to delete\r\n            const indexToDelete = newState.users.findIndex(p => p.login.username === action.payload);\r\n            newState.users.splice(indexToDelete, 1);\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}