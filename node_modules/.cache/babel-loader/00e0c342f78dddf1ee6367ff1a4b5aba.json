{"ast":null,"code":"export class usersState {\n  constructor() {\n    this.users = [];\n  }\n\n}\nexport let usersActionType;\n\n(function (usersActionType) {\n  usersActionType[\"usersDownloaded\"] = \"usersDownloaded\";\n})(usersActionType || (usersActionType = {}));\n\nexport function usersDownloadedAction(users) {\n  return {\n    type: usersActionType.usersDownloaded,\n    payload: users\n  };\n}\nexport function usersReducer(currentState = new usersState(), action) {\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case usersActionType.usersDownloaded:\n      newState.users = action.payload;\n      break;\n  }\n\n  return newState;\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/New folder/Frontend/src/Redux/UsersState.ts"],"names":["usersState","users","usersActionType","usersDownloadedAction","type","usersDownloaded","payload","usersReducer","currentState","action","newState"],"mappings":"AAGA,OAAO,MAAMA,UAAN,CAAiB;AAAA;AAAA,SACbC,KADa,GACQ,EADR;AAAA;;AAAA;AAKxB,WAAYC,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAYZ,OAAO,SAASC,qBAAT,CAA+BF,KAA/B,EAAgE;AACnE,SAAO;AAAEG,IAAAA,IAAI,EAAEF,eAAe,CAACG,eAAxB;AAAyCC,IAAAA,OAAO,EAAEL;AAAlD,GAAP;AACH;AAGD,OAAO,SAASM,YAAT,CAAsBC,YAAwB,GAAG,IAAIR,UAAJ,EAAjD,EAAmES,MAAnE,EAAoG;AAEvG,QAAMC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAjB;;AAEA,UAAQC,MAAM,CAACL,IAAf;AAEI,SAAKF,eAAe,CAACG,eAArB;AACIK,MAAAA,QAAQ,CAACT,KAAT,GAAiBQ,MAAM,CAACH,OAAxB;AACA;AAJR;;AAQA,SAAOI,QAAP;AAEH","sourcesContent":["import UserModel from \"../Models/UserModel\";\r\n\r\n\r\nexport class usersState {\r\n    public users: UserModel[] = [];\r\n}\r\n\r\n\r\nexport enum usersActionType {\r\n    usersDownloaded = \"usersDownloaded\",\r\n\r\n}\r\n\r\n\r\nexport interface usersAction {\r\n    type: usersActionType;\r\n    payload?: any;\r\n}\r\n\r\n\r\nexport function usersDownloadedAction(users: UserModel[]): usersAction {\r\n    return { type: usersActionType.usersDownloaded, payload: users };\r\n}\r\n\r\n\r\nexport function usersReducer(currentState: usersState = new usersState(), action: usersAction): usersState {\r\n\r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case usersActionType.usersDownloaded:\r\n            newState.users = action.payload;\r\n            break;\r\n\r\n    }\r\n\r\n    return newState;\r\n\r\n}"]},"metadata":{},"sourceType":"module"}